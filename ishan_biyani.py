# -*- coding: utf-8 -*-
"""Ishan Biyani.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T0pPULMp2xJcWGh8aVU7YOC92EB6uYXK

## Importing the required libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
import plotly.express as px

"""# Data Sourcing"""

# Reading the data
df = pd.read_csv("loan.csv", sep=',',skipinitialspace=True)

df.head()

# Checking the shape of the dataframe
df.shape

# Checking the Null Values for each column
df.isnull().sum()

"""# Data Cleaning

## > Treating Missing Values
#### Dropping the columns with Null values as this missing data would be of no help.

columns:["tot_hi_cred_lim","total_bal_ex_mort","total_bc_limit","total_il_high_credit_limit","percent_bc_gt_75","pct_tl_nvr_dlq","num_tl_op_past_12m","num_tl_90g_dpd_24m","num_tl_30dpd","num_tl_120dpd_2m","num_sats","num_rev_tl_bal_gt_0","num_rev_accts","num_op_rev_tl","num_il_tl","num_bc_tl","num_bc_sats","num_actv_rev_tl","num_actv_bc_tl","num_accts_ever_120_pd","mths_since_recent_revol_delinq","mths_since_recent_inq","mths_since_recent_bc_dlq","mths_since_recent_bc","mort_acc","mo_sin_rcnt_tl","mo_sin_rcnt_rev_tl_op","mo_sin_old_rev_tl_op","mo_sin_old_il_acct","bc_util","bc_open_to_buy","avg_cur_bal","acc_open_past_24mths","inq_last_12m","total_cu_tl","inq_fi","total_rev_hi_lim","all_util","max_bal_bc","open_rv_24m","open_rv_12m","il_util","total_bal_il","mths_since_rcnt_il","open_il_24m","open_il_12m","open_il_6m","open_acc_6m","tot_cur_bal","tot_coll_amt","verification_status_joint","dti_joint","annual_inc_joint","mths_since_last_major_derog"]
"""

df=df.drop(columns=["tot_hi_cred_lim","total_bal_ex_mort","total_bc_limit","total_il_high_credit_limit","percent_bc_gt_75","pct_tl_nvr_dlq","num_tl_op_past_12m","num_tl_90g_dpd_24m","num_tl_30dpd","num_tl_120dpd_2m","num_sats","num_rev_tl_bal_gt_0","num_rev_accts","num_op_rev_tl","num_il_tl","num_bc_tl","num_bc_sats","num_actv_rev_tl","num_actv_bc_tl","num_accts_ever_120_pd","mths_since_recent_revol_delinq","mths_since_recent_inq","mths_since_recent_bc_dlq","mths_since_recent_bc","mort_acc","mo_sin_rcnt_tl","mo_sin_rcnt_rev_tl_op","mo_sin_old_rev_tl_op","mo_sin_old_il_acct","bc_util","bc_open_to_buy","avg_cur_bal","acc_open_past_24mths","inq_last_12m","total_cu_tl","inq_fi","total_rev_hi_lim","all_util","max_bal_bc","open_rv_24m","open_rv_12m","il_util","total_bal_il","mths_since_rcnt_il","open_il_24m","open_il_12m","open_il_6m","open_acc_6m","tot_cur_bal","tot_coll_amt","verification_status_joint","dti_joint","annual_inc_joint","mths_since_last_major_derog"],axis=1)

"""#### Checking the shape after dropping missing value columns"""

df.shape

df.info()

"""#### dropping the columns where most of the data is missing and imputing that data can result in bias."""

df=df.drop(columns=["next_pymnt_d","mths_since_last_record","mths_since_last_delinq"],axis=1)

# Checking count of null values after removing missing value columns
df.isnull().sum()

"""#### Suggestion: 
- Imputation of column emp_length with mode where rows have missing values
- df["emp_length"]=df["emp_length"].fillna(df["emp_length"].mode()[0])

## > Fixing Rows and Columns

#### Dropping the following columns as the values are provided by Individual borrower and doesn't helps in analysis
"""

df=df.drop(columns=["id","member_id","emp_title","title","url","desc","zip_code"],axis=1)

"""#### Dropping the rows since number of null values are insignificant as compared to shape of the dataset"""

df=df[~(df.pub_rec_bankruptcies.isnull())]

df=df[~(df.last_credit_pull_d.isnull())]

df=df[~(df.revol_util.isnull())]

df=df[~(df.emp_length.isnull())]

"""#### Deleting following columns as it contains single value and hence cannot help in analysis"""

df=df.drop(columns=["pymnt_plan","initial_list_status","collections_12_mths_ex_med","policy_code","application_type","acc_now_delinq","chargeoff_within_12_mths","delinq_amnt","tax_liens"],axis=1)

"""#### Dropping columns associated with "customer behaviour"
"""

df=df.drop(columns=["delinq_2yrs","earliest_cr_line","inq_last_6mths","open_acc","pub_rec","revol_bal","revol_util","total_acc","out_prncp","out_prncp_inv","total_pymnt","total_rec_prncp","total_rec_int","total_pymnt_inv","total_rec_late_fee","recoveries","collection_recovery_fee","last_pymnt_d","last_pymnt_amnt","last_credit_pull_d"],axis=1)

"""#### Removing all the rows where loan status is "current" since analysis of defaulters can't be done on them"""

df=df[~(df.loan_status=="Current")]

df.shape

df.isnull().sum()

"""### What each column represent:
1.  loan_amnt: amount applied by the borrower
2.  funded_amnt: amount recommended by the Lending Club
3.  funded_amnt_inv: amount funded by the investor
4.  term: The number of payments on the loan. Values are in months and can be either 36 or 60.
5.  int_rate: interest rate on the loan
6.  installment: The monthly payment owed by the borrower if the loan originates.
7.  grade: loan grade assigned by Lending club
8.  sub_grade: subgrade assigned by Lending Club
9.  emp_length: Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means     ten or more years.
10. home_ownership: The home ownership status provided by the borrower during registration. Our values are: RENT, OWN,             MORTGAGE, OTHER.
11. annula_inc: The self-reported annual income provided by the borrower during registration.
12. verification_status: Indicates if income was verified by LC, not verified, or if the income source was verified.
13. issue_d: The month which the loan was funded
14. loan_status: Current status of the loan, Fully paid or Charged Off.
15. purpose: A category provided by the borrower for the loan request. 
16. addr_state: The state provided by the borrower in the loan application
17. dti:A ratio calculated using the borrower’s total monthly debt payments on the total debt obligations, excluding mortgage       and the requested LC loan, divided by the borrower’s self-reported monthly income.
18. pub_rec_bankruptcies: Number of public record bankruptcies.

## Type-Driven Metrics( Steven's Typology):
|Nominal||Ordinal||Interval||Ratio|
|-------||-------||--------||-----|
|home_ownership||grade||term||loan_amnt|
|verification_status||sub_grade||emp_length||funded_amnt|
|loan_status||||issue_d||funded_amnt_inv|
|purpose||||pub_rec_bankruptcies||int_rate|
|addr_state||||||installment|
|||||||annual_inc|
|||||||dti|

## > Standardising Values
"""

df.int_rate.value_counts()

#Removing suffix '%'
df.int_rate=pd.to_numeric(df.int_rate.apply(lambda x : x.split('%')[0]))

#Removing '<' and '+' from emp_length column
df.emp_length = pd.to_numeric(df.emp_length.apply(lambda x: 0 if "<" in x else (x.split('+')[0] if "+" in x else x.split()[0])))

df.head()

"""## Outlier Detection for Continuous Variable"""

#Checking spread for loan_amnt

fig=px.box(df.loan_amnt)
fig.show()

#Checking spread for funded_amnt_inv

fig=px.box(df.funded_amnt_inv)
fig.show()

#Checking spread for funded_amnt

fig=px.box(df.funded_amnt)
fig.show()

#Checking spread for int_rate

fig=px.box(df.int_rate)
fig.show()

#Checking spread for annual_inc

fig=px.box(df.annual_inc)
fig.show()

df.annual_inc.quantile([0.25,0.5,0.75,0.9,0.91,0.93,0.95,0.97,0.99,1])

"""#### Suggestion:
- Removing outlier after 0.97 quantile as with a low variation in quantile after that, value variates               highly.
- df=df[df.annual_inc<df.annual_inc.quantile(0.97)]
"""

#Checking spread for dti

fig=px.box(df.dti)
fig.show()

"""# Univariate Analysis

#### Frequency Distribution of numerical Variables
"""

#Frequency Distribution for int_rate

fig,ax =plt.subplots(figsize=(8,6))
plt.style.use('dark_background')
sns.distplot(df.int_rate,bins=25,vertical=False,color='g')
plt.title("Distribution of int_rate", fontsize=12)
plt.show()

#Frequency Distribution for funded_amnt_inv and funded_amnt

fig,ax =plt.subplots(figsize=(15,10))
plt.subplot(221)
sns.distplot(df.funded_amnt_inv,bins=35,vertical=False,color='g')
plt.title("Distribution of funded_amnt_inv", fontsize=12)
plt.subplot(222)
sns.distplot(df.funded_amnt,bins=35,vertical=False,color='r')
plt.title("Distribution of funded_amnt", fontsize=12)
plt.show()

#Frequency Distribution for loan_amnt

sns.set_style('dark')
sns.histplot(df.loan_amnt,bins=10,color='b')
plt.title("Distribution of loan_amnt", fontsize=12)
plt.show()

#Frequency Distribution for installment

sns.set_style('whitegrid')
sns.distplot(df.installment,bins=10,vertical=False,color='g')
plt.title("Distribution of installment", fontsize=12)
plt.show()

"""#### Categorical Variables

##### - defaulter ratio = Charged Off / Fully Paid
"""

# Count for term which are defaulters

fig=px.histogram(df,x="term",color="loan_status",title="term for defaulters",template='ggplot2',width=600,height=400)
fig.show()

"""### insight : 
- loan taken for 60 months term has higher defaulter ratio

### recommendation :
- loan term should be shorter
"""

# Count for loan_status 

fig=px.pie(data_frame=df,names="loan_status",title="loan_status",template='seaborn',height=400,width=600)
fig.show()

# Count for grade which are defaulters

fig=px.histogram(df,x="grade",color="loan_status",title="grade for defaulters",template='plotly_dark',width=600,height=400)
fig.show()

"""### insight : 
- loan grade 'F' and 'G' have more defaulter ratio. 
- loan grade 'A', 'B' and 'C' have less defaulter ratio.

### recommendation :
- more caution should be taken when borrower applies for grade 'F' and 'G'.
"""

# Count for  sub_grade which are defaulters

fig, ax = plt.subplots(figsize=(10,7))
sns.set_palette('colorblind')
sns.countplot(x = 'grade', order = ['A', 'B', 'C', 'D', 'E', 'F', 'G'] , hue = 'sub_grade',data = df[df.loan_status == 'Charged Off'])
plt.show()

#since keeping subgrade as given doesn't make sense so extracting subgrade numbers for hue

df.sub_grade = df.sub_grade.apply(lambda x : int(x[-1]))
df.sub_grade.head()

fig, ax = plt.subplots(figsize=(12,7))
sns.set_palette('colorblind')
sns.countplot(x = 'grade', order = ['A', 'B', 'C', 'D', 'E', 'F', 'G'] , hue = 'sub_grade',data = df[df.loan_status == 'Charged Off'])
plt.title("sub_grade for defaulters",fontsize=12)
plt.show()

"""### insight : 
- for grade 'A' and 'B'-- sub_grade '5' tends to be more defaulters.
- for grade 'C', 'E', 'F' and 'G'-- sub_grade '1' tends to be more defaulters.
- for grade 'D'-- sub_grade '2' tends to be more defaulters.

### recommendation :
- background verification should be done especially when borrower applies for sub_grade mentioned above.
"""

# Count for  emp_length which are defaulters

fig=px.histogram(df,x="emp_length",color="loan_status",color_discrete_sequence=["gold", "red"],template="plotly_white",title="emp_length defaulter ratio",width=800,height=400)
fig.show()

"""### insight : 
- Borrowers with emp_length '10' tends to be more defaulters.

### recommendation:
- emp_length should not be only considered for lending the loan to borrowers.
"""

# Count for home_ownership which are defaulters

fig=px.histogram(df,x="home_ownership",color="loan_status",template="ggplot2",title="home_ownership defaulter ratio",log_y=True,width=600,height=400)
fig.show()

"""### insight:
- borrower having home_ownership 'Rent' tend to be more defaulters.
- borrower having home_ownership as 'Other' has higher defaulter ratio.

### recommendation:
- caution shall be taken when borrower with home_ownership as 'Rent' and 'Other' applies for loan.
"""

# Count for verification_status which are defaulters

fig, ax = plt.subplots(figsize = (6,4))
ax.set(yscale = 'log')
sns.countplot(x="verification_status",data=df[df.loan_status == 'Charged Off'])
plt.title("verification_status for defaulters",fontsize=12)
plt.show()

"""### insight:
- source verified borrowers are less defaulters.

### recommendation:
- source verified borrowers shall be considered for lending loan
"""

# Count for purpose which are defaulters

fig, ax = plt.subplots(figsize = (10,8))
ax.set(xscale = 'log')
sns.countplot(y="purpose",data=df[df.loan_status == 'Charged Off'])
plt.title("loan purpose for defaulters",fontsize=12)
plt.show()

"""### insight:
- borrower borrowing loan with purpose of debt_consolidation tends to be more defaulters.
- borrower borrowing loan with purpose of renewable_energy tends to be less defaulters.

### recommendation:
- shall not lend the loan to borrowers with loan purpose of debt_consolidation.
"""

# Count for addr_state which are defaulters

fig, ax = plt.subplots(figsize = (10,8))
ax.set(yscale = 'log')
sns.countplot(x="addr_state",data=df[df.loan_status == 'Charged Off'],dodge=True)
plt.title("addr_state for defaulters",fontsize=12)
plt.xticks(rotation=90)
plt.show()

fig=px.histogram(df,x="addr_state",color="loan_status",template="ggplot2",title="addr_state defaulter ratio",log_y=True,width=800,height=400)
fig.show()

"""### insight:
- Nevada "NV" has highest number of defaulter Ratio.

### recommendation:
- caution shall be taken while lending loan to borrowers from state Nevada 'NV'.

## Creating Bins and plotting for numeric variable
"""

# Creating bins for int_rate and then plotting

df['int_rate_bins'] = pd.cut(df['int_rate'], bins=5,precision =0,labels=['0-5','5-10','10-15','15-20','20-25'])
fig=px.histogram(df,x="int_rate_bins",color="loan_status",title="int_rate defaulter ratio",width=600,height=400)
fig.show()

"""### insight:
- int_rate in range '20-25' has highest ratio of defaulter.
- int_rate in range '0-5' has lowest ratio of defaulter.

### recommendation:
- loan should be lended with lower int_rate.
"""

#Creating bins and plotting funded_amnt_inv_bins

df['funded_amnt_inv_bins'] = pd.cut(df['funded_amnt_inv'], bins=5,precision =0,labels=['0-7K','7K-14K','14K-21K','21K-28K','28K-35K'])
fig=px.histogram(df,x="funded_amnt_inv_bins",color="loan_status",color_discrete_sequence=["pink", "cyan"],template="plotly_white",title="funded_amnt_inv_bins defaulter ratio",width=600,height=400)
fig.show()

"""### insight:
- accounts having investment in range 28K-35K have higher defaulter ratio.
- accounts having investment in range 0-14K have lower defaulter ratio.

### recommendation:
- investors should prefer investing with lower funded amount to avoid loss of money.
"""

#Creating bins and plotting funded_amnt_bins

df['funded_amnt_bins'] = pd.cut(df['funded_amnt'], bins=5,precision =0,labels=['500-7400','7400-14300','14300-21200','21200-28100','28100-35K'])
fig=px.histogram(df,x="funded_amnt_bins",color="loan_status",color_discrete_sequence=["orange", "red"],title="funded_amnt_bins defaulter ratio",width=600,height=400)
fig.show()

#Creating bins and plotting loan_amnt_bins

df['loan_amnt_bins'] = pd.cut(df['loan_amnt'], bins=5,precision =0,labels=['500-7400','7400-14300','14300-21200','21200-28100','28100-35K'])
fig=px.histogram(df,x="loan_amnt_bins",color="loan_status",color_discrete_sequence=["blue", "red"],title="loan_amnt_bins defaulter ratio",width=600,height=400)
fig.show()

"""### insight:
- funded amount approved in range of 28100-35K has high defaulter ratio.
- funded amount approved in range of 500-14300 has lower defaulter ratio.

### recommendation:
- loan amount in range of 500-14300 shall be preferred to approve by Lending Club.
"""

#Creating bins and plotting installment_bins

df['installment_bins'] = pd.cut(df['installment'], bins=5,precision =0,labels=['0-300','300-600','600-900','900-1200','1200-1500'])
fig=px.histogram(df,x="installment_bins",color="loan_status",color_discrete_sequence=["cyan", "green"],title="installment_bins defaulter ratio",width=600,height=400)
fig.show()

"""### insight:
- borrowers who choose installment in range 900-1200 have higher defaulter ratio.
- borrowers who choose installment in range 1200-1500 have lower defaulter ratio.

### recommendation:
- borrowers shall be provided/recommended with higher number of installments to avoid them being defaulter.
"""

#Creating bins and plotting annual_inc_bins

df['annual_inc_bins'] = pd.cut(df['annual_inc'], bins=5,precision =0,labels=['4K-1200K','1200K-2400K','2400K-3600K','3600K-4800K','4800K-6000K'])
fig=px.histogram(df,x="annual_inc_bins",color="loan_status",color_discrete_sequence=["yellow", "green"],log_y=True,title="annual_inc defaulter ratio",width=600,height=400)
fig.show()

#Since defaulters does not lies in range above 2400K, let's consider the range below it and analyse.
df2=df[df.annual_inc<24000]

df2['annual_inc_bins'] = pd.cut(df2['annual_inc'], bins=5,precision =0,labels=['4K-500K','500K-1000K','1000K-1500K','1500K-2000K','2000K-2400K'])
fig=px.histogram(df2,x="annual_inc_bins",color="loan_status",color_discrete_sequence=["yellow", "green"],log_y=True,title="annual_inc(4K-2400K) defaulter ratio",width=600,height=400)
fig.show()

"""### insights:
- defaulters lies below the range having annual_income of 2400K only.
- for borrowers having annual income in range 4K-2400K, lowest defaulter ratio lies in range 2000K-2400K.
- for borrowers having annual income in range 4K-2400K, higher defaulter ratio lies in range 4K-1500K.

### recommendation:
- caution should be taken when borrowers with annual income in range 4K-1500K applies for loan.
"""

#Creating bins and plotting dti_bins

df['dti_bins'] = pd.cut(df['dti'], bins=6,precision =0,labels=['0-5','5-10','10-15','15-20','20-25','25-30'])
fig=px.histogram(df,x="dti_bins",color="loan_status",color_discrete_sequence=["blue", "pink"],title="dti defaulter ratio",width=600,height=400)
fig.show()

"""### insights: 
- borrower having debt-to-income ratio in range 20-25 has high defaulter ratio.
- borrower having debt-to-income ratio in range 0-10 has low defaulter ratio.

### recommendation:
- Lending Company shall avoid lending loan to borrower with dti in range 20-25.

## Analyzing by issue month and year
"""

df_month_year=df.issue_d.str.partition('-',True)
df["issue_month"]=df_month_year[2]
df["issue_date"]=df_month_year[0]

df.head()

#Defaulter ratio with issue_month

fig=px.histogram(df,x="issue_month",color="loan_status",template="simple_white",color_discrete_sequence=["violet", "cyan"],title="issue_month defaulter ratio",width=600,height=400)
fig.show()

"""### insights:
- loan issued to borrowers in month May, September and December have higher defaulter ratio.

# Segmented Univariate analysis
"""

df.head()

"""### 1. Groupby grade and sub_grade"""

# Creating Pivot table while grouping by Grade and Sub_grade
df3=df.pivot_table(index=["grade","sub_grade"],values=["funded_amnt_inv","loan_amnt","funded_amnt","int_rate","installment","annual_inc","dti"],aggfunc={"funded_amnt_inv":np.mean,"loan_amnt":np.mean,"funded_amnt":np.mean,"int_rate":np.mean,"installment":np.mean,"annual_inc":np.median,"dti":np.mean})

df3.head()

sns.pairplot(df3[["annual_inc","dti","funded_amnt_inv","installment","int_rate"]])
plt.show()

"""### 2. Groupby home_ownership"""

# Creating Pivot table while grouping by home_ownership
df4=df.pivot_table(index="home_ownership",values=["funded_amnt_inv","loan_amnt","funded_amnt","int_rate","installment","annual_inc","dti"],aggfunc={"funded_amnt_inv":np.mean,"loan_amnt":np.mean,"funded_amnt":np.mean,"int_rate":np.mean,"installment":np.mean,"annual_inc":np.median,"dti":np.mean})

df4.head()

"""### insight: 
- borrower having home_ownership 'Mortage' has highest median for annual_inc and average for dti, funded_amnt, funded_amnt_inv, installment, loan_amnt.
- borrower having home_ownership 'Rent' has highest average of int_rate.

### 3. Groupby purpose
"""

# Creating Pivot table while grouping by purpose
df5=df.pivot_table(index="purpose",values=["funded_amnt_inv","loan_amnt","funded_amnt","int_rate","installment","annual_inc","dti"],aggfunc={"funded_amnt_inv":np.mean,"loan_amnt":np.mean,"funded_amnt":np.mean,"int_rate":np.mean,"installment":np.mean,"annual_inc":np.median,"dti":np.mean})

df5.head()

df5.describe()

"""### insight:
- borrowers having loan_purpose of home_improvement has highest median of annual_inc.
- borrowers having loan_purpose of credit_card and debt_consolidation has highest average of dti.
- borrowers having loan_purpose of small_business has highest average of int_rate, funded_amnt, funded_amnt_inv, loan_amnt and installment

### 4. Groupby emp_length
"""

# Creating Pivot table while grouping by emp_length
df6=df.pivot_table(index="emp_length",values=["funded_amnt_inv","loan_amnt","funded_amnt","int_rate","installment","annual_inc","dti"],aggfunc={"funded_amnt_inv":np.mean,"loan_amnt":np.mean,"funded_amnt":np.mean,"int_rate":np.mean,"installment":np.mean,"annual_inc":np.median,"dti":np.mean})

df6.head()

df6.describe()

"""### insight:
- borrower with emp_length 10 has highest median of annual_inc and highest average of funded_amnt, funded_amnt_inv, loan_amnt and installment
- borrower with emp_length 6 has highest average of dti.
- borrower with emp_length 7 has highest average of int_rate.

# Bivariate / Multivariate analysis

### - Correlation Matrix
"""

import plotly.graph_objects as go

corr = df.corr()

trace = go.Heatmap(z=corr.values,
                  x=corr.index.values,
                  y=corr.columns.values)

fig = go.Figure()
fig.add_trace(trace)
fig.show()

"""### > installment with int_rate"""

#installment with int_rate

fig=px.scatter(df,y="installment", x="int_rate",color="loan_status",title="No. of Charged Off varying with int_rate and installment")
fig.show()

"""### insight:
- when installment is >800, number of Charged Off are less irrespective of int_rate.
- when int_rate is <10, number of Charged Off are less and as installment increses Charged Off decrease.

### recommendation:
- Decreasing int_rate and increasing number of installments results in lesser number of Charged Off.

### > grades with funded_amnt_inv
"""

#distribution of Charged Off varying with grades and funded_amnt_inv

fig=px.box(df,x="grade",y="funded_amnt_inv",color="loan_status",title="distribution of loan_status varying with grades and funded_amnt_inv",width=800,height=600)
fig.show()

"""### insight:
- in grade 'F', median for Charged Off loan status lies higher than fully paid loan status.

### recommendation:
- investor shall avoid investing for loan grade 'F'

### > verification_status with funded_amnt_inv
"""

#verification_status with funded_amnt_inv

fig=px.violin(df,x="verification_status",y="funded_amnt_inv",color="loan_status",template="ggplot2",title="density distribution of loan_status varying with verification_status and funded_amnt_inv",width=800,height=600)
fig.show()

"""### insight:
- Density of 'Charged Off' loan_status for verification_status- 'Not verified' is more than 'Fully Paid'.

### recommendation:
- investor shall avoid investing when verification status is 'Not verified'.

### > loan_amnt with purpose
"""

#loan_amnt with purpose

fig=px.histogram(df,x="loan_amnt",y="purpose",color="loan_status",title="No.of Charged Off varying with purpose and loan_amnt",template="simple_white",color_discrete_sequence=["orange", "purple"],width=600,height=400)
fig.show()

"""### insight:
- borrowers who asked for loan_amnt for debt_consolidation purpose have been mostly Charge Off.

### recommendation:
- loan request for the purpose of debt_consolidation shall be rejected.

### > annual_inc with purpose
"""

#annual_inc with purpose

plt.figure(figsize=(10,8))
sns.barplot(data =df,x='annual_inc', y='purpose',palette="deep")
plt.title("purpose vs annual_inc",fontsize=12)
plt.show()

"""### insight:
- borrower with higher annual_inc applied for loan for purpose of home_improvement, renewable_energy and small business mostly

### recommendation:
- Lending company shall focus on providing loan for the purpose of home_improvement, renewable_energy and small business

### > loan_amnt with term
"""

#loan_amnt with term

fig=px.box(df,x="loan_amnt",y="term",color="loan_status",title="distribution of loan_status varying with loan_amnt and term",width=600,height=400)
fig.show()

"""### insight:
- borrower who asked for higher loan_amnt and chose longer period of term are more defaulters.

### recommendation:
- borrower asking for lower loan_amnt for shorter term shall be preferred over borrower asking for higher loan_amnt for longer term.

### > loan_amnt with int_rate
"""

#loan_amnt with int_rate

fig=px.box(df,x="loan_amnt",y="int_rate_bins",color="loan_status",title="No.of Charged Off varying with int_rate and loan_amnt",template="simple_white",color_discrete_sequence=["cyan", "purple"],width=600,height=400)
fig.show()

"""### insight:
- borrower who applied for higher loan_amnt with higher int_rate are Charged Off more as compared to borrowers who applied for less loan_amnt with lower int_rate.

### recommendation:
- borrowers applying for lower loan_amnt with low int_rate shall be preferred over borrowers applying for higher loan_amnt with high int_rate

### > emp_length with funded_amnt
"""

#emp_length with funded_amnt

fig=px.box(df,y="funded_amnt",x="emp_length",color="loan_status",template="plotly_dark",title="distribution of loan_status varying with loan_amnt and emp_length",width=650,height=400)
fig.show()

"""### insight:
- larger number of borrowers with emp_length 10 or 10< got their loan approved and more number of them were marked as Charged Off.

### recommendation:
- loan should not be approved on the basis of emp_length only

### > annual_inc with loan_amnt
"""

#annual income(<2400K) with loan_amnt

plt.figsize=(12,10)
sns.barplot(x = "annual_inc_bins", y = "loan_amnt", hue = 'loan_status', data = df2)
plt.title("annual_inc vs loan_amnt",fontsize=12)
plt.show()

"""### insight:
- borrowers with higher annual_inc applied for higher loan_amnt but more of them Charged Off.
- borrower with annual_inc in range 500K-1000K has less number of Charged Off.

### > loan_amnt with issue_month and issue_date
"""

#loan_amnt with issue_month and issue_date

plt.figure(figsize=(20,20))
plt.subplot(221)
sns.lineplot(data =df,y='loan_amnt', x='issue_month', hue ='loan_status')
plt.title("loan_amnt vs issue_month",fontsize=12)
plt.subplot(222)
sns.lineplot(data =df,y='loan_amnt', x='issue_date', hue ='loan_status')
plt.title("loan_amnt vs issue_date",fontsize=12)
plt.show()

"""### insight:
- loan issued in the month of 'December' are more Charged Off.
- loan issued on the date of '11' are more Charged Off.

## Driver Variables:
- Term
- Verification Status
- Interest Rate
- Installment
- Grade and Subgrade
"""